///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбменДаннымиСервер.ФормаУзлаПриСозданииНаСервере(ЭтотОбъект, Отказ);
	
	РежимСинхронизацииОрганизаций =
		?(Объект.ИспользоватьОтборПоОрганизациям, "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям", "СинхронизироватьДанныеПоВсемОрганизациям");
	
	РежимСинхронизацииПодразделений =
		?(Объект.ИспользоватьОтборПоПодразделениям, "СинхронизироватьДанныеТолькоПоВыбраннымПодразделениям", "СинхронизироватьДанныеПоВсемПодразделениям");
	
	РежимСинхронизацииСкладов =
		?(Объект.ИспользоватьОтборПоСкладам, "СинхронизироватьДанныеТолькоПоВыбраннымСкладам", "СинхронизироватьДанныеПоВсемСкладам");
			
	Элементы.ГруппаСтавкаНДСПоУмолчанию.Видимость = ПолучитьФункциональнуюОпцию("_ДемоУчитыватьНДС");
	
	ОпределитьВариантСинхронизацииДокументов();
	ОпределитьВариантСинхронизацииСправочников();
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Элементы.Наименование.Видимость = Ложь;
		Элементы.Служебные.Видимость = Ложь;
		
	КонецЕсли;
	УстановитьВидимостьНаСервере();
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменДаннымиСервер.ФормаУзлаПриЗаписиНаСервере(ТекущийОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбменДаннымиКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_УзелПланаОбмена");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВариантСинхронизацииДокументовОтправлятьПолучатьАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ВариантСинхронизацииДокументовОтправлятьАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ВариантСинхронизацииДокументовПолучатьАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ВариантСинхронизацииДокументовВручнуюПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ВариантСинхронизацииСправочниковВручнуюПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиСправочников();
КонецПроцедуры

&НаКлиенте
Процедура ВариантСинхронизацииСправочниковТолькоИспользуемуюВДокументахПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиСправочников();
КонецПроцедуры

&НаКлиенте
Процедура ВариантСинхронизацииСправочниковАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиСправочников();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПоВсемОрганизациямПриИзменении(Элемент)
	УсловияОграниченияСинхронизацииОрганизаций();
	УстановитьВидимостьНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПоВыбраннымОрганизациямПриИзменении(Элемент)
	УсловияОграниченияСинхронизацииОрганизаций();
	УстановитьВидимостьНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПоВсемПодразделениямПриИзменении(Элемент)
	УсловияОграниченияСинхронизацииПодразделений();
	УстановитьВидимостьНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПоВыбраннымПодразделениямПриИзменении(Элемент)
	УсловияОграниченияСинхронизацииПодразделений();
	УстановитьВидимостьНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПоВсемСкладамПриИзменении(Элемент)
	УсловияОграниченияСинхронизацииСкладов();
	УстановитьВидимостьНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПоВыбраннымСкладамПриИзменении(Элемент)
	УсловияОграниченияСинхронизацииСкладов();
	УстановитьВидимостьНаСервере();	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСписокВыбранныхОрганизаций(Команда)
	
	КоллекцияФильтров = Неопределено;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "Организации");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Организация");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник._ДемоОрганизации");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите организации для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);
	
	ОткрытьФорму("ОбщаяФорма._ДемоФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхПодразделений(Команда)
	
	КоллекцияФильтров = Неопределено;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "Подразделения");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Подразделение");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник._ДемоПодразделения");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите подразделения для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);
	
	ОткрытьФорму("ОбщаяФорма._ДемоФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхСкладов(Команда)
	
	КоллекцияФильтров = Неопределено;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "Склады");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Склад");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник._ДемоМестаХранения");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите склад для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);
	
	ОткрытьФорму("ОбщаяФорма._ДемоФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	Элементы.ДатаНачалаВыгрузкиДокументов.Доступность = 
			(ВариантСинхронизацииДокументов = "ОтправлятьИПолучатьАвтоматически" 
			ИЛИ ВариантСинхронизацииДокументов = "ОтправлятьАвтоматически");
	Элементы.ВариантСинхронизацииДокументовПолучатьАвтоматически.Доступность = 
			(ВариантСинхронизацииСправочников <> "ОтправлятьИПолучатьПриНеобходимости");
	Элементы.ВариантСинхронизацииСправочниковТолькоИспользуемуюВДокументах.Доступность = 
			(ВариантСинхронизацииДокументов <> "ПолучатьАвтоматически");
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОткрытьСписокВыбранныхОрганизаций",
		"Доступность",
		Объект.ИспользоватьОтборПоОрганизациям);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОткрытьСписокВыбранныхПодразделений",
		"Доступность",
		Объект.ИспользоватьОтборПоПодразделениям);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОткрытьСписокВыбранныхСкладов",
		"Доступность",
		Объект.ИспользоватьОтборПоСкладам);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимВыгрузкиСправочников()
	
	Если ВариантСинхронизацииСправочников = "ОтправлятьИПолучатьАвтоматически" Тогда
		
		Объект.РежимВыгрузкиСправочников               = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию");
		Объект.РежимВыгрузкиСправочниковКорреспондента = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию");
		
	ИначеЕсли ВариантСинхронизацииСправочников = "ОтправлятьИПолучатьПриНеобходимости" Тогда
		
		Объект.РежимВыгрузкиСправочников               = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости");
		Объект.РежимВыгрузкиСправочниковКорреспондента = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости");
		
	ИначеЕсли ВариантСинхронизацииСправочников = "ОтправлятьИПолучатьВручную" Тогда
		
		Объект.РежимВыгрузкиСправочников               = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную");
		Объект.РежимВыгрузкиСправочниковКорреспондента = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную");
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимВыгрузкиДокументов()
	
	Если ВариантСинхронизацииДокументов = "ОтправлятьИПолучатьАвтоматически" Тогда
		
		Объект.РежимВыгрузкиДокументов               = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию");
		Объект.РежимВыгрузкиДокументовКорреспондента = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию")
		
	ИначеЕсли ВариантСинхронизацииДокументов = "ОтправлятьАвтоматически" Тогда
		
		Объект.РежимВыгрузкиДокументов               = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию");
		Объект.РежимВыгрузкиДокументовКорреспондента = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную");
		
	ИначеЕсли ВариантСинхронизацииДокументов = "ПолучатьАвтоматически" Тогда
		
		Объект.РежимВыгрузкиДокументов               = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную");
		Объект.РежимВыгрузкиДокументовКорреспондента = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию");
		
	ИначеЕсли ВариантСинхронизацииДокументов = "ОтправлятьИПолучатьВручную" Тогда
		
		Объект.РежимВыгрузкиДокументов               = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную");
		Объект.РежимВыгрузкиДокументовКорреспондента = ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную");
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВариантСинхронизацииДокументов()
	
	Если Объект.РежимВыгрузкиДокументов                = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию
		И Объект.РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию Тогда
		
		ВариантСинхронизацииДокументов = "ОтправлятьИПолучатьАвтоматически"
		
	ИначеЕсли Объект.РежимВыгрузкиДокументов           = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию
		И Объект.РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную Тогда
		
		ВариантСинхронизацииДокументов = "ОтправлятьАвтоматически"
		
	ИначеЕсли Объект.РежимВыгрузкиДокументов           = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную
		И Объект.РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию Тогда
		
		ВариантСинхронизацииДокументов = "ПолучатьАвтоматически"
		
	ИначеЕсли Объект.РежимВыгрузкиДокументов           = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную
		И Объект.РежимВыгрузкиДокументовКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную Тогда
		
		ВариантСинхронизацииДокументов = "ОтправлятьИПолучатьВручную"
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВариантСинхронизацииСправочников()
	
	Если Объект.РежимВыгрузкиСправочников                = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию
		И Объект.РежимВыгрузкиСправочниковКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию Тогда
		
		ВариантСинхронизацииСправочников = "ОтправлятьИПолучатьАвтоматически"
		
	ИначеЕсли Объект.РежимВыгрузкиСправочников           = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости
		И Объект.РежимВыгрузкиСправочниковКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости Тогда
		
		ВариантСинхронизацииСправочников = "ОтправлятьИПолучатьПриНеобходимости"
		
	ИначеЕсли Объект.РежимВыгрузкиСправочников           = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную
		И Объект.РежимВыгрузкиСправочниковКорреспондента = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную Тогда
		
		ВариантСинхронизацииСправочников = "ОтправлятьИПолучатьВручную"
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище); // ТаблицаЗначений
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		КолонкаПредставление = СписокВыбранныхЗначений.Колонки.Представление; // КолонкаТаблицыЗначений
		КолонкаПредставление.Имя = СтруктураПараметров.ИмяКолонкиДляЗаполнения;
		Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Загрузить(СписокВыбранныхЗначений);
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	// Обновим заголовок выбранных организаций.
	Если Объект.Организации.Количество() > 0 Тогда
		
		ВыбранныеОрганизации = Объект.Организации.Выгрузить().ВыгрузитьКолонку("Организация");
		НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации, ",");
		
	Иначе
		
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхОрганизаций.Заголовок = НовыйЗаголовокОрганизаций;
	
	
	// Обновим заголовок выбранных подразделений.
	Если Объект.Подразделения.Количество() > 0 Тогда
		
		ВыбранныеПодразделения = Объект.Подразделения.Выгрузить().ВыгрузитьКолонку("Подразделение");
		НовыйЗаголовокПодразделений = СтрСоединить(ВыбранныеПодразделения, ",");
		
	Иначе
		
		НовыйЗаголовокПодразделений = НСтр("ru = 'Выбрать подразделения'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхПодразделений.Заголовок = НовыйЗаголовокПодразделений;

	// Обновим заголовок выбранных складов.
	Если Объект.Склады.Количество() > 0 Тогда
		
		ВыбранныеСклады = Объект.Склады.Выгрузить().ВыгрузитьКолонку("Склад");
		НовыйЗаголовокСкладов = СтрСоединить(ВыбранныеСклады, ",");
		
	Иначе
		
		НовыйЗаголовокСкладов = НСтр("ru = 'Выбрать склады'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхСкладов.Заголовок = НовыйЗаголовокСкладов;

КонецПроцедуры

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	ТабличнаяЧасть           = Объект[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
	ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	МассивВыбранныхЗначений  = ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	
	Возврат МассивВыбранныхЗначений;
	
КонецФункции

&НаКлиенте
Процедура УсловияОграниченияСинхронизацииОрганизаций()
	Объект.ИспользоватьОтборПоОрганизациям = РежимСинхронизацииОрганизаций = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям";
КонецПроцедуры

&НаКлиенте
Процедура УсловияОграниченияСинхронизацииПодразделений()
	Объект.ИспользоватьОтборПоПодразделениям = РежимСинхронизацииПодразделений = "СинхронизироватьДанныеТолькоПоВыбраннымПодразделениям";
КонецПроцедуры

&НаКлиенте
Процедура УсловияОграниченияСинхронизацииСкладов()
	Объект.ИспользоватьОтборПоСкладам = РежимСинхронизацииСкладов = "СинхронизироватьДанныеТолькоПоВыбраннымСкладам";
КонецПроцедуры

#КонецОбласти
